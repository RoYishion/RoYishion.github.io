v-for指令遍历数组
<!--1.在遍历过程中没有使用下标值-->
<ul>
    <li v-for="item in names">{{item}}</li>
</ul>

<!--2.在遍历过程中，获取下标值-->
<ul>
    <li v-for="(item,index) in names">{{index+1}}.{{item}}</li>
</ul>

data: {
	names: ['狗蛋','翠花','张三','老王']
}



v-for指令遍历对象
<!--1.在遍历对象的过程中，如果只是获取一个值，那么获取到的是value-->
<ul>
    <li v-for="item in info">{{item}}</li>
</ul>

<!--2.获取key和value，格式：(value, key)-->
<ul>
   <li v-for="(value, key) in info">{{value}}--{{key}}</li>
</ul>

<!--3.获取key和value和index，格式：(value, key, index)-->
<ul>
    <li v-for="(value, key, index) in info">{{index+1}}--{{value}}--{{key}}</li>
</ul>



v-for指令使用过程中添加key

例：A,B,C,D
如果没有添加key，在B和C直接插入E，系统默认把C更新成E,把D更新成C，最后插入D。添加key之后可以直接插入，不需要更新插入位置后面的每个元素。
key的作用是为了更高效地更新虚拟DOM。



1.push()  （响应式），在末尾插入元素，可同时插入多个元素
this.letters.push("aa", 'bb', 'cc');

2.pop()  （响应式），删除数组最后一个元素
this.letters.pop();

3.shift()  （响应式），删除数组第一个元素
this.letters.shift();

4.unshift() （响应式），在数组最前面添加元素,可同时添加多个元素
this.letters.unshift("aaa", 'bbb', 'ccc');

5.splice()  （响应式），删除/插入/替换元素
this.letters.splice(index, 1);  //删除index开始的1个元素
this.letters.splice(index);  //删除index开始的全部元素

this.letters.splice(1, 3, 'x', 'y', 'z');  //3表示要替换3个元素，后面的是用于替换的元素

this.letters.splice(index, 0, 'x', 'y', 'z');  //从index插入元素

6.reverse()  （响应式），内容反转
this.letters.reverse();

7.通过索引值修改数组中的元素（非响应式）
this.letters[0] = "bb";

8.set()
Vue.set(this.letters, 0, 'bbb');  //set(要修改的对象，索引值，修改后的值)